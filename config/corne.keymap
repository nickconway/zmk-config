#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define COLE    0
#define NAV     1
#define MOUSE   2
#define MEDIA   3
#define NUM     4
#define SYM     5
#define FUN     6
#define NOTHING 7

&lt {
    quick-tap-ms = <300>;
    retro-tap;
};

&mmv {
    delay-ms = <0>;
    acceleration-exponent=<1>;
    time-to-max-speed-ms = <2000>;
};

&mwh {
    delay-ms = <0>;
    acceleration-exponent=<1>;
    time-to-max-speed-ms = <100>;
};

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

#define AS(keycode) &asmm##keycode
#define ASR(keycode) &ASMR##keycode
#define ASP(keycode) &ASMP##keycode

#define ASB(keycode) &as LS(keycode) keycode
#define ASBR(keycode) &asr LS(keycode) keycode
#define ASBP(keycode) &asp LS(keycode) keycode

#define SK(KEY) &nk KEY KEY

/ {

    #include "behaviors.dtsi"
    #include "macros.dtsi"
    #include "combos.dtsi"
    #include "autoshift.dtsi"

    keymap {

        compatible = "zmk,keymap";

        default_layer {
            label = "  COLE  ";
            bindings = <
                &m1         &wing   AS(W)  AS(F)   AS(P)   AS(B)           AS(J) AS(L)     AS(U)       AS(Y)    AS(QUOT)   AS(MINUS)
                &ptd        AS(A)   AS(R)  AS(S)   AS(T)   AS(G)           AS(M) &atn      AS(E)       AS(I)    AS(O)       &rptd
                AS(GRAVE)   AS(Z)   AS(X)  AS(C)   &dcv    &vcd            AS(K) AS(H)     AS(CMMA)    AS(DOT)  AS(SLASH)  AS(SEMI)
                            &lt FUN ESC &lt NUM BKSP &lt SYM DEL           &lt MEDIA ENTER &lt NAV SPC &lt MOUSE TAB
            >;
        };

        nav {
            label = "  NAVI  ";
            bindings = <
                &trans  ASB(PG_UP)   ASB(HOME)  ASB(UP)         ASB(END)     ASB(INSERT)            &reset  &trans            &trans   &trans      &trans      &bootloader
                &trans  ASB(PG_DN)   ASB(LEFT)  ASB(DOWN)       ASB(RIGHT)   &caps_word             &sleep  SK(LCTL)          SK(LALT) SK(LGUI)    SK(LSHIFT)  &trans
                &trans  &kp LC(Z)    &kp LC(X)  &kp LC(LS(TAB)) &kp LC(TAB)  &kp INSERT             &trans  &kp LG(LC(RIGHT)) &trans   &trans      &trans      &trans
                                                                    &trans &trans &trans            &trans &trans &trans
            >;
        };

        mouse {
            label = "  MOUS  ";
            bindings = <
                &trans  &trans  &trans                  &mmv MOVE_VERT(-3000)   &trans                  &trans                 &trans  &trans           &mwh SCROLL_UP      &trans              &trans  &trans
                &trans  &trans  &mmv MOVE_HOR(-3000)    &mmv MOVE_VERT(3000)    &mmv MOVE_HOR(3000)     &trans                 &trans  &mwh SCROLL_LEFT &mwh SCROLL_DOWN    &mwh SCROLL_RIGHT   &trans  &trans
                &trans  &trans  &trans                  &trans                  &trans                  &trans                 &trans  &trans           &trans              &trans              &trans  &trans
                                                                               &mkp RCLK  &mkp LCLK  &mkp RCLK                 &trans  &trans  &trans
            >;
        };

        media {
            label = "  MDIA  ";
            bindings = <
                &trans          &trans          &trans          &kp C_VOL_UP    &trans          &trans                       &trans  &trans  &kp C_BRI_UP   &trans  &bt BT_CLR  &trans
                &out OUT_TOG    &out OUT_TOG    &kp C_PREV      &kp C_VOL_DN    &kp C_NEXT      &trans                       &trans  &trans  &kp C_BRI_DN   &trans  &trans      &trans
                &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                 &trans  &trans  &trans         &trans  &trans      &trans
                                                                              &kp C_MUTE &kp C_PP &kp C_STOP                 &trans  &trans  &trans
            >;
        };

        number {
            label = "  NUM   ";
            bindings = <
                &bootloader &trans      &trans      &trans      &trans              &reset                 AS(LBKT)     AS(N7)  AS(N8)  AS(N9)  AS(RBKT)    &trans
                &trans      SK(LSHIFT)  SK(LGUI)    SK(LALT)    SK(LCTRL)           &trans                 AS(EQUAL)    AS(N4)  AS(N5)  AS(N6)   AS(SEMI)     &trans
                &trans      &trans      &trans      &trans      &kp LG(LC(LEFT))    &trans                 AS(GRAVE)    AS(N1)  AS(N2)  AS(N3)  AS(BSLH)    &trans
                                                                    &trans  &trans  &trans                 AS(MINUS) AS(N0)  AS(MINUS)
            >;
        };

        symbol {
            label = "  SYMB  ";
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  &trans       &trans      &trans      &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  &kp LS(N9)   AS(LBKT)    AS(MINUS)   &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  &kp LS(N0)   AS(RBKT)    AS(MINUS)   &trans  &trans
                                        &trans  &trans  &trans                 &trans  &trans  &trans
            >;
        };

        function {
            label = "  FUNC  ";
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  AS(F7)  AS(F8)  AS(F9)  AS(F12)  &trans
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  AS(F4)  AS(F5)  AS(F6)  AS(F11)  &trans
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  AS(F1)  AS(F2)  AS(F3)  AS(F10)  &trans
                                        &trans  &trans  &trans                 &trans  &trans  &trans
            >;
        };

        nothing {
            label = "  NOTH  ";
            bindings = <
                &none   &none   &none   &none   &none   &none                  &none   &none   &none   &none   &none   &none
                &none   &none   &none   &none   &none   &none                  &none   &none   &none   &none   &none   &none
                &none   &none   &none   &none   &none   &none                  &none   &none   &none   &none   &none   &none
                                        &none   &none   &none                  &none   &none   &none
            >;
        };

    };

};
