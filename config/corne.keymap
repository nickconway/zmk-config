#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define COLE    0
#define QWERTY  1
#define GAME    2
#define GAMET   3
#define STENO   4
#define NAVL    5
#define MOUSEL  6
#define MEDIAL  7
#define NUMR    8
#define SYMR    9
#define FUNCR   10
#define EM      11

&lt {
    quick-tap-ms = <300>;
    retro-tap;
};

&mmv {
    delay-ms = <0>;
    acceleration-exponent=<1>;
    time-to-max-speed-ms = <2000>;
};

&mwh {
    delay-ms = <0>;
    acceleration-exponent=<1>;
    time-to-max-speed-ms = <100>;
};

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

#define AS(keycode) &as LS(keycode) keycode
#define ASR(keycode) &asr LS(keycode) keycode
#define ASP(keycode) &asp LS(keycode) keycode

#define SK(KEY) &nk KEY KEY

/ {

    behaviors {

        bht: balanced_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        altq: altq {

            compatible = "zmk,behavior-mod-morph";
            label = "ALT_Q";
            #binding-cells = <0>;
            bindings = <ASP(Q)>, <&kp F4>;
            mods = <(MOD_LALT)>;

        };

        wing: wing {

            compatible = "zmk,behavior-mod-morph";
            label = "WIN_GRAVE";
            #binding-cells = <0>;
            bindings = <&altq>, <&kp GRAVE>;
            mods = <(MOD_LGUI)>;

        };

        atn: atn {

            compatible = "zmk,behavior-mod-morph";
            label = "ALT_TAB_N";
            #binding-cells = <0>;
            bindings = <AS(N)>, <&kp TAB>;
            mods = <(MOD_LALT)>;

        };

        ati: ati {

            compatible = "zmk,behavior-mod-morph";
            label = "ALT_I";
            #binding-cells = <0>;
            bindings = <ASR(I)>, <&kp LSHIFT>;
            mods = <(MOD_LALT)>;

        };

        dcv: dcv {

            compatible = "zmk,behavior-mod-morph";
            label = "D_C_V";
            #binding-cells = <0>;
            bindings = <AS(D)>, <&kp V>;
            mods = <(MOD_LCTL)>;

        };

        vcd: vcd {

            compatible = "zmk,behavior-mod-morph";
            label = "V_C_D";
            #binding-cells = <0>;
            bindings = <AS(V)>, <&kp D>;
            mods = <(MOD_LCTL)>;

        };

        as: auto_shift {

            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

        };

        asr: auto_shift_ring {

            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT_RING";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

        };

        asp: auto_shift_pinky {

            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

        };

        lhm: lhm {

            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            //hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            retro-tap;

        };

        rhm: rhm {

            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            //hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            retro-tap;

        };

        nk: not_so_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "not so sticky key";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };

        lhma: lhma {
            compatible = "zmk,behavior-tap-dance";
            label = "lhma";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <AS(A)>, <&lhm LSHIFT A>;
        };

        lhmr: lhmr {
            compatible = "zmk,behavior-tap-dance";
            label = "lhmr";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <AS(R)>, <&lhm LGUI R>;
        };

        lhms: lhms {
            compatible = "zmk,behavior-tap-dance";
            label = "lhms";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <AS(S)>, <&lhm LALT S>;
        };

        lhmt: lhmt {
            compatible = "zmk,behavior-tap-dance";
            label = "lhmt";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <AS(T)>, <&lhm LCTRL T>;
        };

        rhmo: rhmo {
            compatible = "zmk,behavior-tap-dance";
            label = "rhmo";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <AS(O)>, <&rhm LSHIFT O>;
        };

        rhmi: rhmi {
            compatible = "zmk,behavior-tap-dance";
            label = "rhmi";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <AS(I)>, <&rhm LGUI I>;
        };

        rhme: rhme {
            compatible = "zmk,behavior-tap-dance";
            label = "rhme";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <AS(E)>, <&rhm LALT E>;
        };

        rhmn: rhmn {
            compatible = "zmk,behavior-tap-dance";
            label = "rhmn";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <AS(N)>, <&rhm LCTRL &atn>;
        };

        ptd: ptd {
            compatible = "zmk,behavior-tap-dance";
            label = "ptd";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LPAR>, <&kp LBKT>, <&kp LBRC>;
        };

        rptd: rptd {
            compatible = "zmk,behavior-tap-dance";
            label = "rptd";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp RPAR>, <&kp RBKT>, <&kp RBRC>;
        };

        sltd: sltd {
            compatible = "zmk,behavior-tap-dance";
            label = "sltd";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp FSLH>, <&kp BSLH>;
        };

    };

    macros {

        m1: m1 {
            compatible = "zmk,behavior-macro";
            label = "MACRO_1";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LA(SPC)>;
        };

        m2: m2 {
            compatible = "zmk,behavior-macro";
            label = "MACRO_2";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp ENTER &tog GAMET>;
        };

        m3: m3 {
            compatible = "zmk,behavior-macro";
            label = "MACRO_3";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LSHFT &kp A &kp B &kp C>;
        };

    };

    combos {

        compatible = "zmk,combos";

        combo_hmrl_shift {
            timeout-ms = <50>;
            key-positions = <13 25>;
            bindings = <&kp LSHFT>;
            layers = <COLE QWERTY>;
        };

        combo_hmrl_gui {
            timeout-ms = <50>;
            key-positions = <14 26>;
            bindings = <&kp LGUI>;
            layers = <COLE QWERTY>;
        };

        combo_hmrl_alt {
            timeout-ms = <50>;
            key-positions = <15 27>;
            bindings = <&kp LALT>;
            layers = <COLE QWERTY>;
        };

        combo_hmrl_ctrl {
            timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp LCTL>;
            layers = <COLE QWERTY>;
        };

        combo_hmrr_ctrl {
            timeout-ms = <50>;
            key-positions = <19 31>;
            bindings = <&kp LCTL>;
            layers = <COLE QWERTY GAME>;
        };

        combo_hmrr_alt {
            timeout-ms = <50>;
            key-positions = <20 32>;
            bindings = <&kp LALT>;
            layers = <COLE QWERTY GAME>;
        };

        combo_hmrr_gui {
            timeout-ms = <50>;
            key-positions = <21 33>;
            bindings = <&kp LGUI>;
            layers = <COLE QWERTY GAME>;
        };

        combo_hmrr_shift {
            timeout-ms = <50>;
            key-positions = <22 34>;
            bindings = <&kp LSHFT>;
            layers = <COLE QWERTY GAME>;
        };

    };

    keymap {

        compatible = "zmk,keymap";

        default_layer {
            label = "  COLE  ";
            bindings = <
                &m1         &wing   ASR(W)  AS(F)   AS(P)   AS(B)           AS(J) AS(L)     AS(U)       ASR(Y)      ASP(QUOT)   ASP(MINUS)
                &ptd        AS(A)   AS(R)   AS(S)   AS(T)   AS(G)           AS(M) &atn      AS(E)       AS(I)       AS(O)       &rptd
                ASP(GRAVE)  ASP(Z)  ASR(X)  AS(C)   &dcv    &vcd            AS(K) AS(H)     AS(CMMA)    ASR(DOT)    ASP(SLASH)  ASP(SEMI)
                        &lt FUNCR ESC &lt NUMR BKSP &lt SYMR DEL            &lt MEDIAL ENTER &lt NAVL SPC &lt MOUSEL TAB
            >;
        };

        qwerty {
            label = " QWER  ";
            bindings = <
                &kp TAB     &kp Q &kp W &kp E &kp R &kp T           &kp Y &kp U &kp I     &kp O   &kp P     &kp BKSP
                &tog QWERTY &kp A &kp S &kp D &kp F &kp G           &kp H &kp J &kp K     &kp L   &kp SEMI  &kp ENTER
                &kp LSHFT   &kp Z &kp X &kp C &kp V &kp B           &kp N &kp M &kp CMMA  &kp DOT &kp FSLH  &kp RSFT
                                     &trans &trans &trans           &trans &trans &trans
            >;
        };

        game {
            label = " GAME  ";
            bindings = <
                &bht TAB ESC    &kp Q  &kp W  &kp F  &kp P  &kp B          &trans  &trans  &trans  &trans  &trans  &trans
                &kp MINUS       &kp A  &kp R  &kp S  &kp T  &kp G          &trans  &trans  &trans  &trans  &trans  &trans
                &kp GRAVE       &kp Z  &kp X  &kp C  &kp D  &kp V          &trans  &trans  &trans  &trans  &trans  &trans
                                       &kp LCTRL &kp SPC &kp LALT          &m2  &trans  &trans
            >;
        };

        gametype {
            label = " GAMET ";
            bindings = <
                &m1         &wing   ASR(W)  AS(F)   AS(P)   AS(B)           AS(J) AS(L) AS(U)       ASR(Y)      ASP(QUOT)   ASP(MINUS)
                &ptd        ASP(A)  ASR(R)  AS(S)   AS(T)   AS(G)           AS(M) &atn  AS(E)       &ati        ASP(O)      &rptd
                ASP(GRAVE)  ASP(Z)  ASR(X)  AS(C)   &dcv    &vcd            AS(K) AS(H) AS(CMMA)    ASR(DOT)    &sltd       ASP(SEMI)
                        &lt FUNCR ESC &lt NUMR BKSP &lt SYMR DEL            &m2 &lt NAVL SPC &lt MOUSEL TAB
            >;
        };

        steno {
            label = "  STEN  ";
            bindings = <
                &trans   &kp N1 &kp N2   &kp N3  &kp N4  &kp N5          &kp N6  &kp N7 &kp N8   &kp N9  &kp N0      &tog STENO
                &trans   &kp Q  &kp W    &kp E   &kp R   &kp T           &kp Y   &kp U &kp I     &kp O   &kp P       &kp LBKT
                &trans   &kp A  &kp S    &kp D   &kp F   &kp G           &kp H   &kp J &kp K     &kp L   &kp SEMI    &kp QUOT
                                             &kp C &kp C &kp V           &kp N   &kp M &kp M
            >;
        };

        nav_layer {
            label = "  NAVI  ";
            bindings = <
                &m3     AS(PG_UP)   AS(HOME)    AS(UP)           AS(END)     AS(INSERT)           &reset  &trans            &trans   &trans      &trans      &bootloader
                &trans  AS(PG_DN)   AS(LEFT)    AS(DOWN)         AS(RIGHT)   &caps_word           &sleep  SK(LCTL)          SK(LALT) SK(LGUI)    SK(LSHIFT)  &trans
                &trans  &kp LC(Z)   &kp LC(X)   &kp LC(LS(TAB))  &kp LC(TAB) &kp INSERT           &trans  &kp LG(LC(RIGHT)) &trans   &trans      &trans      &trans
                                                           &tog GAME &trans &tog QWERTY           &tog STENO &trans  &tog EM
            >;
        };

        mouse {
            label = "  MOUS  ";
            bindings = <
                &trans  &trans  &trans                  &mmv MOVE_VERT(-3000)   &trans                  &trans                 &trans  &trans           &mwh SCROLL_UP      &trans              &trans  &trans
                &trans  &trans  &mmv MOVE_HOR(-3000)    &mmv MOVE_VERT(3000)    &mmv MOVE_HOR(3000)     &trans                 &trans  &mwh SCROLL_LEFT &mwh SCROLL_DOWN    &mwh SCROLL_RIGHT   &trans  &trans
                &trans  &trans  &trans                  &trans                  &trans                  &trans                 &trans  &trans           &trans              &trans              &trans  &trans
                                                                               &mkp RCLK  &mkp LCLK  &mkp RCLK                 &trans  &trans  &trans
            >;
        };

        media {
            label = "  MDIA  ";
            bindings = <
                &trans          &trans          &trans          &kp C_VOL_UP    &trans          &trans                       &trans  &trans  &kp C_BRI_UP   &trans  &bt BT_CLR  &trans
                &out OUT_TOG    &out OUT_TOG    &kp C_PREV      &kp C_VOL_DN    &kp C_NEXT      &trans                       &trans  &trans  &kp C_BRI_DN   &trans  &trans      &trans
                &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                 &trans  &trans  &trans         &trans  &trans      &trans
                                                                              &kp C_MUTE &kp C_PP &kp C_STOP                 &none  &trans  &trans
            >;
        };

        number {
            label = "  NUM   ";
            bindings = <
                &bootloader &trans      &trans      &trans      &trans              &reset                 AS(LBKT)     AS(N7)  AS(N8)  ASR(N9)  ASP(RBKT)    &trans
                &trans      SK(LSHIFT)  SK(LGUI)    SK(LALT)    SK(LCTRL)           &trans                 AS(EQUAL)    AS(N4)  AS(N5)  AS(N6)   AS(SEMI)     &trans
                &trans      &trans      &trans      &trans      &kp LG(LC(LEFT))    &trans                 AS(GRAVE)    AS(N1)  AS(N2)  ASR(N3)  ASP(BSLH)    &trans
                                                                    &trans  &trans  &trans                 AS(MINUS) AS(N0)  AS(MINUS)
            >;
        };

        symbol {
            label = "  SYMB  ";
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans  &trans  &trans                 &trans  &trans  &trans
            >;
        };

        function {
            label = "  FUNC  ";
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  AS(F7)  AS(F8)  AS(F9)  AS(F12)  &trans
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  AS(F4)  AS(F5)  AS(F6)  AS(F11)  &trans
                &trans  &trans  &trans  &trans  &trans  &trans                 &trans  AS(F1)  AS(F2)  AS(F3)  AS(F10)  &trans
                                        &trans  &trans  &trans                 &trans  &trans  &trans
            >;
        };

        em {
            label = "EM     <3";
            bindings = <
                &kp TAB     &kp Q &kp W &kp E &kp R &kp T           &kp Y &kp U &kp I     &kp O   &kp P     &kp BKSP
                &tog EM     &kp A &kp S &kp D &kp F &kp G           &kp H &kp J &kp K     &kp L   &kp SEMI  &kp ENTER
                &kp LSHFT   &kp Z &kp X &kp C &kp V &kp B           &kp N &kp M &kp CMMA  &kp DOT &kp FSLH  &kp RSFT
                  &lt FUNCR ESC &lt NUMR SPC &lt SYMR DEL           &lt MEDIAL ENTER &lt NAVL BKSP &lt MOUSEL TAB
            >;
        };

    };

};
