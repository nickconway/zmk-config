#define HRM(letter, mod, tapping_time) \
    hr##letter: hr##letter { \
        compatible = "zmk,behavior-hold-tap"; \
        label = ZMK_MACRO_STRINGIFY(HOME_ROW_##letter); \
        #binding-cells = <2>; \
        flavor = "balanced"; \
        tapping-term-ms = <tapping_time>; \
        quick-tap-ms = <QUICK_TAP_TERM>; \
        bindings = <&kp>, <&kp>; \
        retro-tap; \
        retro-tap-behavior = "KEY_PRESS"; \
        retro-tap-param1 = <LS(letter)>; \
    }; \
 \
    hrt##letter: hrt##letter { \
        compatible = "zmk,behavior-tap-dance"; \
        label = ZMK_MACRO_STRINGIFY(hrt##letter); \
        #binding-cells = <0>; \
        tapping-term-ms = <tapping_time>; \
        bindings = <&hr##letter mod letter>, <&kp letter>; \
        on-each-press; \
    };

HRM(A, LSHIFT, TAPPING_TERM_PINKY)
HRM(R, LGUI, TAPPING_TERM_RING)
HRM(S, LALT, TAPPING_TERM)
HRM(T, LCTL, TAPPING_TERM)
HRM(N, LCTL, TAPPING_TERM)
HRM(E, LALT, TAPPING_TERM)
HRM(I, LGUI, TAPPING_TERM_RING)
HRM(O, LSHIFT, TAPPING_TERM_PINKY)

bht: balanced_hold_tap {
    compatible = "zmk,behavior-hold-tap";
    label = "BALANCED_HOLD_TAP";
    #binding-cells = <2>;
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_TERM>;
    global-quick-tap;
    bindings = <&kp>, <&kp>;
};

hht: hold_hold_tap {
    compatible = "zmk,behavior-hold-tap";
    label = "HOLD_HOLD_TAP";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_TERM>;
    global-quick-tap;
    bindings = <&kp>, <&kp>;
};

tht: tap_hold_tap {
    compatible = "zmk,behavior-hold-tap";
    label = "TAP_HOLD_TAP";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_TERM>;
    global-quick-tap;
    bindings = <&kp>, <&kp>;
};

wing: wing {
    compatible = "zmk,behavior-mod-morph";
    label = "WIN_GRAVE";
    #binding-cells = <0>;
    /* bindings = <AS(Q)>, <&kp GRAVE>; */
    bindings = <ASBP(Q)>, <&kp GRAVE>;
    mods = <(MOD_LGUI)>;
};

atn: atn {
    compatible = "zmk,behavior-mod-morph";
    label = "ALT_TAB_N";
    #binding-cells = <0>;
    bindings = <&hrN LCTL N>, <&as LS(TAB) TAB>;
    mods = <(MOD_LALT)>;
};

dcv: dcv {
    compatible = "zmk,behavior-mod-morph";
    label = "D_C_V";
    #binding-cells = <0>;
    bindings = <&asmmD>, <&asmmV>;
    mods = <(MOD_LCTL)>;
};

vcd: vcd {
    compatible = "zmk,behavior-mod-morph";
    label = "V_C_D";
    #binding-cells = <0>;
    bindings = <&asmmV>, <&asmmD>;
    mods = <(MOD_LCTL)>;
};

as: auto_shift {
    compatible = "zmk,behavior-hold-tap";
    label = "AUTO_SHIFT";
    #binding-cells = <2>;
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_TERM>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
};

asr: auto_shift_ring {
    compatible = "zmk,behavior-hold-tap";
    label = "AUTO_SHIFT_RING";
    #binding-cells = <2>;
    tapping-term-ms = <TAPPING_TERM_RING>;
    quick-tap-ms = <QUICK_TAP_TERM>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
};

asp: auto_shift_pinky {
    compatible = "zmk,behavior-hold-tap";
    label = "AUTO_SHIFT_PINKY";
    #binding-cells = <2>;
    tapping-term-ms = <TAPPING_TERM_PINKY>;
    quick-tap-ms = <QUICK_TAP_TERM>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
};

nk: not_so_sticky_key {
    compatible = "zmk,behavior-hold-tap";
    label = "not so sticky key";
    #binding-cells = <2>;
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "hold-preferred";
    bindings = <&kp>, <&sk>;
};

#define SK(KEY) &nk KEY KEY

hrm: hrm {
    compatible = "zmk,behavior-hold-tap";
    label = "HOME_ROW_MOD";
    #binding-cells = <2>;
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_TERM>;
    bindings = <&kp>, <&kp>;
};

#define HRA &hrm LSHIFT A
#define HRR &hrm LGUI R
#define HRS &hrm LALT S
#define HRT &hrm LCTL T
#define HRN &hrm LCTL N
#define HRE &hrm LALT E
#define HRI &hrm LGUI I
#define HRO &hrm LSHIFT O
